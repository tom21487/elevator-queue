$date
	Sat Oct 21 10:49:40 2023
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module testbench $end
$var wire 1 ! stop_at_pos_lvl $end
$var wire 3 " next_tail_sub [2:0] $end
$var wire 8 # next_queue_sub [7:0] $end
$var parameter 2 $ A $end
$var parameter 2 % B $end
$var parameter 2 & C $end
$var parameter 2 ' D $end
$var parameter 32 ( DURATION $end
$var reg 4 ) ipmod30 [3:0] $end
$var reg 8 * next_queue_sub_expected [7:0] $end
$var reg 3 + next_tail_sub_expected [2:0] $end
$var reg 2 , pos_lvl [1:0] $end
$var reg 8 - queue [7:0] $end
$var reg 1 . stop_at_pos_lvl_expected $end
$var reg 3 / tail [2:0] $end
$scope module uut $end
$var wire 4 0 ipmod30 [3:0] $end
$var wire 2 1 pos_lvl [1:0] $end
$var wire 8 2 queue [7:0] $end
$var wire 3 3 tail [2:0] $end
$var wire 1 ! stop_at_pos_lvl $end
$var wire 2 4 pressed_lvl [1:0] $end
$var wire 1 5 pressed_en $end
$var wire 3 6 next_tail_sub [2:0] $end
$var wire 8 7 next_queue_sub [7:0] $end
$scope module pe $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 4 : in [3:0] $end
$var wire 1 5 valid $end
$var wire 2 ; out [1:0] $end
$upscope $end
$scope module q $end
$var wire 2 < pos_lvl [1:0] $end
$var wire 1 5 pressed_en $end
$var wire 2 = pressed_lvl [1:0] $end
$var wire 8 > queue [7:0] $end
$var wire 3 ? tail [2:0] $end
$var wire 1 ! stop_at_pos_lvl $end
$var wire 3 @ next_tail_sub [2:0] $end
$var wire 3 A next_tail_add [2:0] $end
$var wire 8 B next_queue_sub [7:0] $end
$var wire 8 C next_queue_add [7:0] $end
$var wire 1 D add_new_lvl $end
$scope module anl $end
$var wire 1 D add_new_lvl $end
$var wire 1 5 pressed_en $end
$var wire 2 E pressed_lvl [1:0] $end
$var wire 8 F queue [7:0] $end
$var wire 3 G tail [2:0] $end
$var wire 1 H pressed_lvl_in_queue $end
$scope module pliq $end
$var wire 2 I pressed_lvl [1:0] $end
$var wire 8 J queue [7:0] $end
$var wire 3 K tail [2:0] $end
$var wire 4 L pressed_lvl_in_qentry [3:0] $end
$var reg 1 H pressed_lvl_in_queue $end
$var integer 32 M a_idx [31:0] $end
$scope begin genblk1[0] $end
$var parameter 2 N g_idx $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 O g_idx $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 P g_idx $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 Q g_idx $end
$upscope $end
$upscope $end
$upscope $end
$scope module nqa $end
$var wire 1 D add_new_lvl $end
$var wire 2 R pressed_lvl [1:0] $end
$var wire 8 S queue [7:0] $end
$var wire 3 T tail [2:0] $end
$var wire 8 U next_queue_add [7:0] $end
$scope begin genblk1[0] $end
$var parameter 2 V i $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 W i $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 X i $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 Y i $end
$upscope $end
$upscope $end
$scope module nqs $end
$var wire 8 Z next_queue_add [7:0] $end
$var wire 2 [ pos_lvl [1:0] $end
$var wire 1 ! stop_at_pos_lvl $end
$var wire 4 \ shift [3:0] $end
$var wire 3 ] next_tail_add [2:0] $end
$var wire 8 ^ next_queue_sub [7:0] $end
$scope begin genblk1[1] $end
$var parameter 2 _ i $end
$scope module l1 $end
$var wire 2 ` next_queue_add_i [1:0] $end
$var wire 2 a next_queue_add_ip1 [1:0] $end
$var wire 2 b pos_lvl [1:0] $end
$var wire 1 c shift_i $end
$var wire 1 d shift_im1 $end
$var wire 3 e next_tail_add [2:0] $end
$var wire 2 f next_queue_sub_i [1:0] $end
$var parameter 32 g i $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 h i $end
$scope module l1 $end
$var wire 2 i next_queue_add_i [1:0] $end
$var wire 2 j next_queue_add_ip1 [1:0] $end
$var wire 2 k pos_lvl [1:0] $end
$var wire 1 l shift_i $end
$var wire 1 m shift_im1 $end
$var wire 3 n next_tail_add [2:0] $end
$var wire 2 o next_queue_sub_i [1:0] $end
$var parameter 32 p i $end
$upscope $end
$upscope $end
$scope module l0 $end
$var wire 2 q next_queue_add_0 [1:0] $end
$var wire 2 r next_queue_add_1 [1:0] $end
$var wire 2 s pos_lvl [1:0] $end
$var wire 1 t shift_0 $end
$var wire 3 u next_tail_add [2:0] $end
$var wire 2 v next_queue_sub_0 [1:0] $end
$upscope $end
$scope module l3 $end
$var wire 2 w next_queue_add_3 [1:0] $end
$var wire 2 x next_queue_sub_3 [1:0] $end
$var wire 2 y pos_lvl [1:0] $end
$var wire 1 z shift_2 $end
$var wire 1 { shift_3 $end
$var wire 3 | next_tail_add [2:0] $end
$upscope $end
$upscope $end
$scope module nta $end
$var wire 1 D add_new_lvl $end
$var wire 3 } tail [2:0] $end
$var wire 3 ~ next_tail_add [2:0] $end
$upscope $end
$scope module nts $end
$var wire 3 !" next_tail_add [2:0] $end
$var wire 1 ! stop_at_pos_lvl $end
$var wire 3 "" next_tail_sub [2:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope task check_ans $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10 p
b10 h
b1 g
b1 _
b11 Y
b10 X
b1 W
b0 V
b11 Q
b10 P
b1 O
b0 N
b10011100010000 (
b11 '
b10 &
b1 %
b0 $
$end
#0
$dumpvars
b0 ""
b0 !"
b0 ~
b0 }
b0 |
0{
0z
b0 y
b0 x
b0 w
b0 v
b0 u
0t
b0 s
b0 r
b0 q
b0 o
b0 n
0m
0l
b0 k
b0 j
b0 i
b0 f
b0 e
0d
0c
b0 b
b0 a
b0 `
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 U
b0 T
b0 S
b0 R
b100 M
b0 L
b0 K
b0 J
b0 I
0H
b0 G
b0 F
b0 E
0D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
09
18
b0 7
b0 6
05
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
0.
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 #
b0 "
0!
$end
#1000
1!
1{
1z
1l
1m
1c
1d
b0 "
b0 6
b0 @
b0 ""
b1111 \
1t
b1 A
b1 ]
b1 e
b1 n
b1 u
b1 |
b1 ~
b1 !"
1D
15
1.
b1 )
b1 0
b1 :
#1000000
