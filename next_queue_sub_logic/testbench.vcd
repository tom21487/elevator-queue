$date
	Mon Aug 14 21:03:30 2023
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module testbench $end
$var wire 1 ! stop_at_pos_lvl $end
$var wire 8 " next_queue_sub [7:0] $end
$var parameter 2 # A $end
$var parameter 2 $ B $end
$var parameter 2 % C $end
$var parameter 2 & D $end
$var parameter 32 ' DURATION $end
$var reg 8 ( next_queue_add [7:0] $end
$var reg 8 ) next_queue_sub_expected [7:0] $end
$var reg 3 * next_tail_add [2:0] $end
$var reg 2 + pos_lvl [1:0] $end
$var reg 1 , stop_at_pos_lvl_expected $end
$scope module uut $end
$var wire 8 - next_queue_add [7:0] $end
$var wire 3 . next_tail_add [2:0] $end
$var wire 2 / pos_lvl [1:0] $end
$var wire 1 ! stop_at_pos_lvl $end
$var wire 4 0 shift [3:0] $end
$var wire 8 1 next_queue_sub [7:0] $end
$scope begin genblk1[1] $end
$var parameter 2 2 i $end
$scope module l1 $end
$var wire 2 3 next_queue_add_i [1:0] $end
$var wire 2 4 next_queue_add_ip1 [1:0] $end
$var wire 3 5 next_tail_add [2:0] $end
$var wire 2 6 pos_lvl [1:0] $end
$var wire 1 7 shift_i $end
$var wire 1 8 shift_im1 $end
$var wire 2 9 next_queue_sub_i [1:0] $end
$var parameter 32 : i $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 ; i $end
$scope module l1 $end
$var wire 2 < next_queue_add_i [1:0] $end
$var wire 2 = next_queue_add_ip1 [1:0] $end
$var wire 3 > next_tail_add [2:0] $end
$var wire 2 ? pos_lvl [1:0] $end
$var wire 1 @ shift_i $end
$var wire 1 A shift_im1 $end
$var wire 2 B next_queue_sub_i [1:0] $end
$var parameter 32 C i $end
$upscope $end
$upscope $end
$scope module l0 $end
$var wire 2 D next_queue_add_0 [1:0] $end
$var wire 2 E next_queue_add_1 [1:0] $end
$var wire 3 F next_tail_add [2:0] $end
$var wire 2 G pos_lvl [1:0] $end
$var wire 1 H shift_0 $end
$var wire 2 I next_queue_sub_0 [1:0] $end
$upscope $end
$scope module l3 $end
$var wire 2 J next_queue_add_3 [1:0] $end
$var wire 2 K next_queue_sub_3 [1:0] $end
$var wire 3 L next_tail_add [2:0] $end
$var wire 2 M pos_lvl [1:0] $end
$var wire 1 N shift_2 $end
$var wire 1 O shift_3 $end
$upscope $end
$upscope $end
$scope task check_ans $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10 C
b10 ;
b1 :
b1 2
b10011100010000 '
b11 &
b10 %
b1 $
b0 #
$end
#0
$dumpvars
1O
1N
b10 M
b1 L
b11 K
b11 J
b1 I
1H
b10 G
b1 F
b1 E
b10 D
b11 B
1A
1@
b10 ?
b1 >
b11 =
b0 <
b0 9
18
17
b10 6
b1 5
b0 4
b1 3
b11110001 1
b1111 0
b10 /
b1 .
b11000110 -
1,
b10 +
b1 *
b11110001 )
b11000110 (
b11110001 "
1!
$end
#1000
0!
0O
0N
0@
0A
07
08
b0 9
b0 0
0H
b11110001 "
b11110001 1
b1 I
b0 3
b11 4
b11 <
b1 D
b0 E
0,
b11110001 (
b11110001 -
#2000
b11 +
b11 /
b11 6
b11 ?
b11 G
b11 M
#1000000
